# Choose Model Backend: 0 -> ML Dev, 1 -> Vertex
GOOGLE_GENAI_USE_VERTEXAI=1
# ML Dev backend config, ignore if using Vertex.
GOOGLE_API_KEY=IGNORED

# Vertex backend config
GOOGLE_CLOUD_PROJECT=PROJECT
GOOGLE_CLOUD_LOCATION=REGION

######## SPECIFIC FOR TRAVEL CONCIERGE AGENT


# Places API
GOOGLE_PLACES_API_KEY=KEY

# GCS Storage Bucket name - for Agent Engine deployment test
GOOGLE_CLOUD_STORAGE_BUCKET=BUCKET

# Sample Scenario Path - Default is an empty itinerary
# This will be loaded upon first user interaction.
#
# Uncomment one of the two, or create your own.
#
# TRAVEL_CONCIERGE_SCENARIO=travel_concierge/profiles/itinerary_seattle_example.json
TRAVEL_CONCIERGE_SCENARIO=travel_concierge/profiles/itinerary_empty_default.json


######## SPECIFIC FOR RAG AGENT

# AG CUSTOM UPDATE TO prepare_corpus_and_data.py
GOOGLE_RAG_ENGINE_LOCATION=REGION

# Existing corpus in Vertex RAG Engine to be used by RAG agent
# e.g. projects/123/locations/us-central1/ragCorpora/456
RAG_CORPUS=CORPUS_LOCATION

# Staging bucket name for ADK agent deployment to Vertex AI Agent Engine (Shall respect this format gs://your-bucket-name)
STAGING_BUCKET=gs://BUCKET

# Agent Engine ID in the following format: projects/<PROJECT_NUMBER>/locations/us-central1/reasoningEngines/<AGENT_ENGINE_ID>
AGENT_ENGINE_ID=YOUR_VALUE_HERE
   

